---
- name: Wait until VM gets IPv4 address
  hosts: localhost
  connection: local
  gather_facts: false
  vars:
    vm_name: jc-ub2004

  tasks:
    # ------------------------------------------------------
    - name: List VM {{ vm_name }}
      scale_computing.hypercore.vm_info:
        vm_name: "{{ vm_name }}"
      register: vm_info_result

## records.0.nics.ipv4_addresses.0
#    - name: Wait on IP address
#      scale_computing.hypercore.vm_info:
#        vm_name: "{{ vm_name }}"
#      register: vm_info_result
#      when: vm_info_result.records.0.nics.0.ipv4_addresses == []
#      with_sequence: start=0 end=2
#      loop_control:
#        pause: 5

    - name: Wait on IP address
      ansible.builtin.shell: |
        #!/usr/bin/env python
        # print("in-python")
        import json
        import sys
        import os
        import time
        import base64
        import ssl
        from urllib.request import Request, urlopen
        
        def url_get_json(url):
            request = Request(url)
            username = os.environ["SC_USERNAME"]
            password = os.environ["SC_PASSWORD"]
            userpass_b64 = base64.b64encode(bytes(username + ":" + password, "utf-8")).decode()
            request.add_header("Authorization", f"Basic {userpass_b64}")
            ctx = ssl.create_default_context()
            ctx.check_hostname = False
            ctx.verify_mode = ssl.CERT_NONE
            response = urlopen(request, context=ctx)
            content = response.read()
            return json.loads(content), response
        
        def main():
            host_url = os.environ["SC_HOST"]
            assert host_url[-1] != "/"
            data = sys.stdin.read()
            # print(f"data={data}")
            vm_uuid = json.loads(data)
            url = f"{host_url}/rest/v1/VirDomain/{vm_uuid}"
            while True:
                vm_data, response = url_get_json(url)
                # print(json.dumps(vm_data, indent=4))
                ipv4addresses = vm_data[0]["netDevs"][0]["ipv4Addresses"]
                if ipv4addresses:
                    break
                time.sleep(5)
            print(json.dumps(ipv4addresses))
        
        main()
      args:
        # /usr/bin/python3 - fedora
        # /usr/local/bin/python - python:3.10-slim-buster docker image
        executable: python3
        stdin: "{{ vm_info_result.records.0.uuid | to_json }}"
      timeout: 120
      changed_when: false
      register: vm_ipv4addresses
